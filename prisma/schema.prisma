datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL_heroku")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL_heroku") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  sessions      Session[]
  posts         Post[]
  answers       Answer[]
  Account       Account[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  published Boolean  @default(false)
  date      DateTime @default(now()) @db.Date
  answers   Answer[]
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

model Answer {
  id     Int      @id @default(autoincrement())
  answer String?
  date   DateTime @default(now()) @db.Date
  post   Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
  user   User     @relation(fields: [userId], references: [id])
  userId String
}
